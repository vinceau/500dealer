{"version":3,"sources":["lib/fivehundred.ts","lib/seedshuffle.ts","components/Card.tsx","components/Game.tsx","components/GameForm.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["values","suits","FiveHundredCard","value","suit","this","displayValue","toString","indexOf","card1","card2","sortingValue","Joker","FiveHundredDeck","players","randomSeed","seed","cards","Error","forEach","val","push","array","rng","seedrandom","i","j","temp","length","Math","floor","seedshuffle","FiveHundredGame","numPlayers","deck","shuffle","player","start","slice","Card","props","useState","clicked","setClicked","outerClasses","getSuit","getRank","rank","innerClasses","onClick","className","Game","setPlayer","kittyShown","setKittyShown","hand","setHand","reset","game","code","useEffect","options","key","htmlFor","onChange","event","parseInt","currentTarget","disabled","deal","sort","compare","concat","kitty","aria-label","role","id","map","card","repr","GameForm","history","useReactRouter","setNumPlayers","readOnly","randomCode","random","HomePage","to","pathname","GamePage","match","params","Boolean","window","location","hostname","ReactDOM","render","basename","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13a21ccf.chunk.js","sourcesContent":["import { seedshuffle } from \"./seedshuffle\";\n\nconst values = [5, 6, 7, 8, 9, 10, 14, 15, 16, 17];\nconst suits = ['S', 'C', 'D', 'H'];\n\nexport class FiveHundredCard {\n    public readonly value: number;\n    public readonly suit: string;\n\n    constructor(value: number, suit: string) {\n        this.value = value;\n        this.suit = suit;\n    }\n\n    public repr(): string {\n        if (this.suit === 'X') return 'X';\n        let displayValue: string = this.value.toString();\n        if (this.value === 14) displayValue = 'J';\n        if (this.value === 15) displayValue = 'Q';\n        if (this.value === 16) displayValue = 'K';\n        if (this.value === 17) displayValue = 'A';\n        return displayValue + this.suit;\n    }\n\n    public static compare(card1: FiveHundredCard, card2: FiveHundredCard): number {\n        return card1.sortingValue() - card2.sortingValue();\n    }\n\n    private sortingValue(): number {\n        if (this.suit === 'X') {\n            return 1000;\n        }\n        return suits.indexOf(this.suit) * 100 + this.value;\n    }\n\n}\n\nconst Joker = new FiveHundredCard(0, 'X');\n\nexport class FiveHundredDeck {\n    private seed: string;\n    public cards: FiveHundredCard[];\n\n    constructor(players: number, randomSeed: string) {\n        if (players < 4 || players > 6) {\n            throw new Error(`Number of players must be between 4 and 6. Got: ${players}`);\n        }\n\n        this.seed = randomSeed + players.toString();\n        this.cards = [];\n        suits.forEach((suit) => {\n            values.forEach((val) => {\n                this.cards.push(new FiveHundredCard(val, suit));\n            })\n        });\n        // add the joker\n        this.cards.push(Joker);\n        // add black 4s\n        this.cards.push(new FiveHundredCard(4, 'D'));\n        this.cards.push(new FiveHundredCard(4, 'H'));\n\n        if (players >= 5) {\n            this.cards.push(new FiveHundredCard(4, 'C'));\n            this.cards.push(new FiveHundredCard(4, 'S'));\n            // adds 2s, and 3s\n            suits.forEach((suit) => {\n                this.cards.push(new FiveHundredCard(2, suit));\n                this.cards.push(new FiveHundredCard(3, suit));\n            });\n        }\n\n        if (players === 6) {\n            // adds 11s, and 12s\n            suits.forEach((suit) => {\n                this.cards.push(new FiveHundredCard(11, suit));\n                this.cards.push(new FiveHundredCard(12, suit));\n            });\n            // add red 13s\n            this.cards.push(new FiveHundredCard(13, 'D'));\n            this.cards.push(new FiveHundredCard(13, 'H'));\n        }\n\n    }\n\n    public shuffle() {\n        seedshuffle(this.cards, this.seed);\n    }\n}\n\nexport class FiveHundredGame {\n    private numPlayers: number;\n    private deck: FiveHundredDeck;\n\n    constructor(players: number, randomSeed: string) {\n        this.numPlayers = players;\n        this.deck = new FiveHundredDeck(players, randomSeed)\n        this.deck.shuffle();\n    }\n\n    public deal(player: number): FiveHundredCard[] {\n        if (player < 1 || player > this.numPlayers) {\n            throw new Error(`Player number must be between 1 and ${this.numPlayers}. Got: ${player}`);\n        }\n        const start = (player - 1) * 10;\n        return this.deck.cards.slice(start, start + 10)\n    }\n\n    public kitty(): FiveHundredCard[] {\n        const start = this.numPlayers * 10;\n        return this.deck.cards.slice(start, start + 3)\n    }\n}\n","import seedrandom from \"seedrandom\";\n\n// Shuffles an array in place using a given seed\nexport const seedshuffle = (array: Array<any>, seed: string) => {\n    const rng = seedrandom(seed);\n    let i = 0;\n    let j = 0;\n    let temp = null;\n\n    for (i = array.length - 1; i > 0; i -= 1) {\n        j = Math.floor(rng() * (i + 1))\n        temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n    }\n}\n","import React, { useState } from 'react';\n\ninterface CardProps {\n    suit: string,\n    rank: number\n}\n\nexport const Card: React.SFC<CardProps> = (props) => {\n    const [clicked, setClicked] = useState(false);\n    const outerClasses = clicked ? \"\" : `${getSuit(props.suit)} rank${getRank(props.rank)}`;\n    const innerClasses = clicked ? \"back\" : \"face\";\n    return (\n        <div onClick={() => setClicked(!clicked)} className={`card ${outerClasses}`}>\n            <div className={innerClasses} />\n        </div>\n    );\n}\n\nconst getRank = (value: number): number => {\n    // show 1 for joker and ace\n    switch (value) {\n        case 0: // joker rank\n            return 1;\n        case 17: // ace rank\n            return 1;\n        default:\n            return value;\n    }\n}\n\nfunction getSuit(suit: string) {\n    switch (suit) {\n        case 'S':\n            return 'spades';\n        case 'C':\n            return 'clubs';\n        case 'D':\n            return 'diamonds';\n        case 'H':\n            return 'hearts';\n        default:\n            return 'joker';\n    }\n}\n","import React, { useState, useEffect } from 'react';\n\n\nimport { FiveHundredGame, FiveHundredCard } from '../lib/fivehundred';\nimport { Card } from './Card';\n\ninterface GameProps {\n    code: string;\n    players: number;\n}\n\nexport const Game: React.SFC<GameProps> = (props) => {\n    const [player, setPlayer] = useState(0);\n    const [kittyShown, setKittyShown] = useState(false);\n    const [hand, setHand] = useState<FiveHundredCard[]>([]);\n    const reset = () => {\n        setHand([]);\n        setKittyShown(false);\n    }\n\n    const game = new FiveHundredGame(props.players, props.code);\n\n    useEffect(() => {\n        reset();\n    }, [props.players, props.code, player]);\n\n    const options = [];\n    for (let i = 0; i < props.players; i++) {\n        options.push(<option key={`optionPlayer${i + 1}`} value={i + 1}>Player {i + 1}</option>);\n    }\n    const handlePlayerChange = (event: React.FormEvent<HTMLSelectElement>) => {\n        setPlayer(parseInt(event.currentTarget.value));\n    }\n    const deal = () => {\n        if (player !== 0) {\n            reset();\n            setHand(game.deal(player).sort(FiveHundredCard.compare));\n        }\n    }\n    const kitty = () => {\n        if (!kittyShown) {\n            setHand(hand.concat(game.kitty()));\n            setKittyShown(true);\n        }\n    }\n    return (\n        <div>\n            <div>\n                <label htmlFor=\"player-option\">I am:</label>\n                <select value={player} onChange={handlePlayerChange}>\n                    <option value={0} />\n                    {options}\n                </select>\n                <button disabled={player === 0} onClick={deal}>🃋 Deal me the cards</button>\n                <button disabled={player === 0 || kittyShown} onClick={kitty}>\n                    <span aria-label=\"cat\" role=\"img\">😻</span> meow\n                </button>\n            </div>\n            <ul id=\"cards\">{hand.map((card) => {\n                return <Card key={card.repr()} rank={card.value} suit={card.suit} />\n            })}</ul>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport useReactRouter from 'use-react-router';\n\nimport { Game } from './Game';\n\ninterface GameFormProps {\n    code: string;\n}\n\nexport const GameForm: React.SFC<GameFormProps> = (props) => {\n    const { history } = useReactRouter();\n    const [numPlayers, setNumPlayers] = useState(4);\n    const handleChange = (event: React.FormEvent<HTMLSelectElement>) => {\n        setNumPlayers(parseInt(event.currentTarget.value));\n    }\n    const newCode = () => {\n        const randomCode = Math.random().toString(36).slice(2);\n        history.push(`/game/${randomCode}`);\n    }\n    return (\n        <div>\n            <h1>500 cards dealer</h1>\n            <div>\n                <label htmlFor=\"player-option\">No. Players:</label>\n                <select value={numPlayers} onChange={handleChange}>\n                    <option value={4}>4</option>\n                    <option value={5}>5</option>\n                    <option value={6}>6</option>\n                </select>\n            </div>\n            <div>\n                <label htmlFor=\"seed\">The secret code for this round is:</label>\n                <input id=\"seed\" readOnly value={props.code} />\n                <button onClick={newCode}>\n                    <span aria-label=\"dice\" role=\"img\">🎲</span> New Code\n                </button>\n            </div>\n            <Game code={props.code} players={numPlayers} />\n        </div>\n    );\n}","import React from \"react\";\nimport { HashRouter as Router, Route, RouteComponentProps, Redirect } from \"react-router-dom\";\nimport { GameForm } from \"./GameForm\";\n\nexport const App = () => {\n  return (\n    <Router basename=\"/\">\n      <Route exact path=\"/\" component={HomePage} />\n      <Route path=\"/game/:code\" component={GamePage} />\n    </Router>\n  );\n}\n\nconst HomePage = () => {\n  const randomCode = Math.random().toString(36).slice(2);\n  return (\n    <Redirect to={{ pathname: `/game/${randomCode}` }} />\n  );\n}\n\nconst GamePage = ({ match }: RouteComponentProps<{code: string}>) => {\n  return (\n    <GameForm code={match.params.code} />\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}